#!/usr/bin/env bash

# docker pull test
# latency test
# throughput test
# resource test: external hosts:


1_docker_test(){
    local action=test
    local name="docker test #1"
    local description="Tests is docker is installed on the host system"
    local status=""
    local message=""
    printf "\n"
    printf "  Test: %s\n" "${name}"
    printf "    Description: %s\n" "${description}"
    printf "    Project: %s\n" "${project}"
    if command -v docker >/dev/null 2>&1; then
        printf "\n"
        printf "  Action: %s\n" "$(bold ${action})"
        status=$(bold $(green "PASSED"))
        printf "    Status: %s: %s\n" "${action}" "${status}"
    else
        printf "\n"
        printf "  Action: %s\n" "$(bold ${action})"
        status=$(bold $(red "FAILED"))
        printf "    Status: %s: %s\n" "${action}" "${status}"
        exit 1
    fi

}

2_docker_test(){
    local action=test
    local name="docker test #2" 
    local description="Tests if docker hello world can run on the system"
    local status=""
    local message=""
    printf "\n"
    printf "  Test: %s\n" "${name}"
    printf "    Description: %s\n" "${description}"
    printf "    Project: %s\n" "${project}"
    if docker run hello-world; then
        printf "\n"
        printf "  Action: %s\n" "$(bold ${action})"
        status=$(bold $(green "PASSED"))
        printf "    Status: %s: %s\n" "${action}" "${status}"
    else
        printf "\n"
        printf "  Action: %s\n" "$(bold ${action})"
        status=$(bold $(red "FAILED"))
        printf "    Status: %s: %s\n" "${action}" "${status}"
        exit 1
    fi

}

1_project_test(){
    local action=test
    local name="project test"
    local description="tests if the project env var is set"
    local status=""
    local message=""
    printf "\n"
    printf "  Test: %s\n" "${name}"
    printf "    Description: %s\n" "${description}"
    printf "    Project: %s\n" "${project}"
    if [ -n "${project+x}" ] && [ -n "$project" ]; then
        message="The project env var is set and is not empty"
        printf "    Message: %s\n" "${message}"
        status=$(bold $(green "PASSED"))
        printf "    Status: %s: %s\n" "${action}" "${status}"
    else
        message="The project env var is empty or not set"
        printf "    Message: %s\n" "${message}"
        status=$(bold $(red "FAILED"))
        printf "    Status: %s: %s\n" "${action}" "${status}"
        exit 1
    fi
}

docker_image_test1(){
    local action=test
    local name="docker image test #1"
    local description="tests if the docker image is set"
    local status=""
    local message=""
    printf "\n"
    printf "  Test: %s\n" "${name}"
    printf "    Description: %s\n" "${description}"
    printf "    Docker image: %s\n" "${docker_image}"
    if [ -n "${docker_image+x}" ] && [ -n "$docker_image" ]; then
        message="Docker image is set and is not empty"
        printf "    Message: %s\n" "${message}"
        status=$(bold $(green "PASSED"))
        printf "    Status: %s: %s\n" "${action}" "${status}"
    else
        message="Docker image is not set or is empty"
        printf "    Message: %s\n" "${message}"
        status=$(bold $(red "FAILED"))
        printf "    Status: %s: %s\n" "${action}" "${status}"
        exit 1
    fi

}

docker_image_test2(){
    local action=test
    local name="docker image test #2"
    local description="tests if the docker image exists"
    local status=""
    local message=""
    printf "\n"
    printf "  Test: %s\n" "${name}"
    printf "    Description: %s\n" "${description}"
    printf "    Docker image: %s\n" "${docker_image}"

    if [[ "$(docker images -q "${docker_image}" 2> /dev/null)" != "" ]]; then
        message="Docker image exists"
        printf "    Message: %s\n" "${message}"
        status=$(bold $(green "PASSED"))
        printf "    Status: %s: %s\n" "${action}" "${status}"
    else
        message="Docker image does not exist"
        printf "    Message: %s\n" "${message}"
        status=$(bold $(red "FAILED"))
        printf "    Status: %s: %s\n" "${action}" "${status}"
        exit 1
    fi
}

build_artifact_test(){
    local action=test
    local name="build artifact test"
    local description="tests if required build artifacts were generated"
    local message=""
    local docker_image="$(make image_$project)"
    local exit_code=0
    printf "\n"
    printf "  Test: %s\n" "${name}"
    printf "    Description: %s\n" "${description}"
    printf "    Build artifacts: \n"
    for build_artifact in "${build_artifacts[@]}"; do
        if compgen -G "${build_artifact}" > /dev/null; then
            printf "      Build artifact: %-95s %s\n" "${build_artifact}" "$(bold $(green "EXISTS"))" 
        else
            printf "      Build artifact: %-95s %s\n" "${build_artifact}" "$(bold "$(red "DOES NOT EXIST")")" 
            exit_code=1
        fi
    done
    if [[ $exit_code == 0 ]]; then
        message="all build artifacts exist"
        printf "    Message: %s\n" "${message}" 
        status=$(bold $(green "PASSED")) 
        printf "    Status: %s: %s\n" "${action}" "${status}" 
    else
        message="Build artifacts missing"
        printf "    Message: %s\n" "${message}"
        status=$(bold $(red "FAILED"))
        printf "    Status: %s\n" "${status}"
    fi
    exit $exit_code
}

